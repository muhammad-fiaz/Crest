name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-22.04, windows-2022, macos-13]
        build_type: [Debug, Release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies (Ubuntu)
      if: startsWith(matrix.os, 'ubuntu')
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build
    
    - name: Install dependencies (macOS)
      if: startsWith(matrix.os, 'macos')
      run: |
        brew install cmake ninja
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCREST_BUILD_TESTS=ON \
          -DCREST_BUILD_EXAMPLES=ON
      shell: bash
    
    - name: Build
      run: cmake --build build --config ${{ matrix.build_type }} --parallel
    
    - name: Run tests
      run: |
        cd build
        ctest -C ${{ matrix.build_type }} --output-on-failure --verbose
      shell: bash
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.build_type }}
        path: |
          build/Testing/Temporary/*.log
        retention-days: 7
        if-no-files-found: ignore

  coverage:
    name: Code Coverage
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build lcov
    
    - name: Configure CMake with coverage
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_FLAGS="--coverage -fprofile-arcs -ftest-coverage" \
          -DCMAKE_EXE_LINKER_FLAGS="--coverage" \
          -DCREST_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build --config Debug
    
    - name: Run tests
      run: |
        cd build
        ctest -C Debug --output-on-failure
    
    - name: Generate coverage report
      run: |
        lcov --capture --directory build --output-file coverage.info
        lcov --remove coverage.info '/usr/*' '*/tests/*' --output-file coverage.info
        lcov --list coverage.info
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.info
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

  sanitizers:
    name: Sanitizer - ${{ matrix.sanitizer }}
    runs-on: ubuntu-22.04
    
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined, thread]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build clang-14
    
    - name: Configure CMake with ${{ matrix.sanitizer }} sanitizer
      run: |
        SANITIZER_FLAG=""
        case "${{ matrix.sanitizer }}" in
          address)
            SANITIZER_FLAG="-fsanitize=address -fno-omit-frame-pointer"
            ;;
          undefined)
            SANITIZER_FLAG="-fsanitize=undefined -fno-omit-frame-pointer"
            ;;
          thread)
            SANITIZER_FLAG="-fsanitize=thread"
            ;;
        esac
        
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang-14 \
          -DCMAKE_CXX_COMPILER=clang++-14 \
          -DCMAKE_C_FLAGS="$SANITIZER_FLAG" \
          -DCMAKE_CXX_FLAGS="$SANITIZER_FLAG" \
          -DCMAKE_EXE_LINKER_FLAGS="$SANITIZER_FLAG" \
          -DCREST_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build --config Debug
    
    - name: Run tests with ${{ matrix.sanitizer }} sanitizer
      run: |
        cd build
        ctest -C Debug --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:check_initialization_order=1:detect_stack_use_after_return=1
        UBSAN_OPTIONS: print_stacktrace=1
        TSAN_OPTIONS: second_deadlock_stack=1

  valgrind:
    name: Valgrind Memory Check
    runs-on: ubuntu-22.04
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y cmake ninja-build valgrind
    
    - name: Configure CMake
      run: |
        cmake -B build \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCREST_BUILD_TESTS=ON
    
    - name: Build
      run: cmake --build build --config Debug
    
    - name: Run tests with Valgrind
      run: |
        cd build/tests/Debug
        for test in test_*; do
          echo "=== Running $test with Valgrind ==="
          valgrind --leak-check=full --show-leak-kinds=all --track-origins=yes --error-exitcode=1 ./$test
        done
      shell: bash

  test-status:
    name: Test Status
    runs-on: ubuntu-latest
    needs: [test, coverage, sanitizers, valgrind]
    if: always()
    
    steps:
    - name: Check test status
      run: |
        if [[ "${{ needs.test.result }}" == "success" ]] && \
           [[ "${{ needs.coverage.result }}" == "success" ]] && \
           [[ "${{ needs.sanitizers.result }}" == "success" ]] && \
           [[ "${{ needs.valgrind.result }}" == "success" ]]; then
          echo "✅ All tests passed!"
          exit 0
        else
          echo "❌ Some tests failed"
          echo "Test: ${{ needs.test.result }}"
          echo "Coverage: ${{ needs.coverage.result }}"
          echo "Sanitizers: ${{ needs.sanitizers.result }}"
          echo "Valgrind: ${{ needs.valgrind.result }}"
          exit 1
        fi
