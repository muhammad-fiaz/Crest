name: Release

on:
  release:
    types: [released]

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            artifact_name: crest-linux
            asset_name: crest-linux-x64.tar.gz
            platform: Linux x64
          - os: windows-latest
            artifact_name: crest-windows
            asset_name: crest-windows-x64.zip
            platform: Windows x64
          - os: macos-latest
            artifact_name: crest-macos
            asset_name: crest-macos-x64.tar.gz
            platform: macOS x64
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest
    
    - name: Build Release
      run: |
        xmake config -m release
        xmake build
    
    - name: Package (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        mkdir -p release/lib
        mkdir -p release/include
        mkdir -p release/build
        cp -r build/lib/* release/lib/ 2>/dev/null || cp -r build/linux/x86_64/release/*.a release/lib/ || cp -r build/macosx/x86_64/release/*.a release/lib/ || true
        cp -r include/* release/include/
        cp -r build release/build/ 2>/dev/null || true
        cp xmake.lua release/
        cp LICENSE release/
        tar -czf ${{ matrix.asset_name }} -C release .
    
    - name: Package (Windows)
      if: runner.os == 'Windows'
      run: |
        mkdir release\lib
        mkdir release\include
        mkdir release\build
        xcopy /E /I /Y build\lib release\lib 2>nul || xcopy /E /I /Y build\windows\x64\release\*.lib release\lib || echo.
        xcopy /E /I include release\include
        xcopy /E /I /Y build release\build 2>nul || echo.
        copy xmake.lua release\
        copy LICENSE release\
        powershell Compress-Archive -Path release\* -DestinationPath ${{ matrix.asset_name }}
    
    - name: Upload Release Asset
      uses: softprops/action-gh-release@v2
      with:
        files: ./${{ matrix.asset_name }}
        token: ${{ secrets.GH_TOKEN }}

  publish-conan:
    name: Publish Conan Package
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Setup Python
      uses: actions/setup-python@v6
      with:
        python-version: '3.11'
    
    - name: Install xmake
      run: |
        curl -fsSL https://xmake.io/shget.text | bash
        echo "$HOME/.local/bin" >> $GITHUB_PATH
    
    - name: Install Conan
      run: |
        pip install conan
        conan profile detect --force
    
    - name: Create Conan Package
      run: |
        export PATH="$HOME/.local/bin:$PATH"
        conan create . --version=${{ github.event.release.tag_name }}
    
    - name: Package Conan Recipe
      run: |
        mkdir -p conan-package
        cp conanfile.py conan-package/
        cp xmake.lua conan-package/
        cp LICENSE conan-package/
        cp -r include conan-package/
        cp -r src conan-package/
        tar -czf crest-conan-${{ github.event.release.tag_name }}.tar.gz -C conan-package .
    
    - name: Upload Conan Package to Release
      uses: softprops/action-gh-release@v2
      with:
        files: crest-conan-${{ github.event.release.tag_name }}.tar.gz
        token: ${{ secrets.GH_TOKEN }}

  publish-xmake:
    name: Publish xmake Package
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Install xmake
      uses: xmake-io/github-action-setup-xmake@v1
      with:
        xmake-version: latest
    
    - name: Build and Package
      run: |
        xmake config -m release
        xmake build
        xmake package
    
    - name: Create xmake Package
      run: |
        mkdir -p xmake-package
        cp xmake.lua xmake-package/
        cp LICENSE xmake-package/
        cp -r include xmake-package/
        cp -r src xmake-package/
        tar -czf crest-xmake-${{ github.event.release.tag_name }}.tar.gz -C xmake-package .
    
    - name: Upload xmake Package to Release
      uses: softprops/action-gh-release@v2
      with:
        files: crest-xmake-${{ github.event.release.tag_name }}.tar.gz
        token: ${{ secrets.GH_TOKEN }}

  publish-vcpkg:
    name: Publish vcpkg Port
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Create vcpkg Port
      run: |
        mkdir -p vcpkg-port/ports/crest
        cp vcpkg.json vcpkg-port/ports/crest/
        cp xmake.lua vcpkg-port/ports/crest/
        cp LICENSE vcpkg-port/ports/crest/
        cat > vcpkg-port/ports/crest/portfile.cmake << 'EOF'
        vcpkg_from_github(
            OUT_SOURCE_PATH SOURCE_PATH
            REPO muhammad-fiaz/crest
            REF ${{ github.event.release.tag_name }}
            SHA512 0
            HEAD_REF main
        )
        
        vcpkg_configure_cmake(
            SOURCE_PATH ${SOURCE_PATH}
            PREFER_NINJA
        )
        
        vcpkg_install_cmake()
        vcpkg_fixup_cmake_targets()
        
        file(REMOVE_RECURSE ${CURRENT_PACKAGES_DIR}/debug/include)
        file(INSTALL ${SOURCE_PATH}/LICENSE DESTINATION ${CURRENT_PACKAGES_DIR}/share/crest RENAME copyright)
        EOF
    
    - name: Package vcpkg Port
      run: |
        tar -czf crest-vcpkg-${{ github.event.release.tag_name }}.tar.gz -C vcpkg-port .
    
    - name: Upload vcpkg Port to Release
      uses: softprops/action-gh-release@v2
      with:
        files: crest-vcpkg-${{ github.event.release.tag_name }}.tar.gz
        token: ${{ secrets.GH_TOKEN }}

  update-release-notes:
    name: Update Release Notes
    runs-on: ubuntu-latest
    needs: [build, publish-xmake, publish-conan, publish-vcpkg]
    permissions:
      contents: write
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Generate Release Notes
      id: notes
      run: |
        VERSION="${{ github.event.release.tag_name }}"
        REPO="${{ github.repository }}"
        
        cat > release_notes.md << EOF
        ## ðŸ“¦ Installation
        
        | File | Platform | Method | Download |
        |------|----------|--------|----------|
        | \`crest-linux-x64.tar.gz\` | Linux x64 | Binary | [Download](https://github.com/${REPO}/releases/download/${VERSION}/crest-linux-x64.tar.gz) |
        | \`crest-windows-x64.zip\` | Windows x64 | Binary | [Download](https://github.com/${REPO}/releases/download/${VERSION}/crest-windows-x64.zip) |
        | \`crest-macos-x64.tar.gz\` | macOS x64 | Binary | [Download](https://github.com/${REPO}/releases/download/${VERSION}/crest-macos-x64.tar.gz) |
        | \`crest-xmake-${VERSION}.tar.gz\` | All | xmake | [Download](https://github.com/${REPO}/releases/download/${VERSION}/crest-xmake-${VERSION}.tar.gz) |
        | \`crest-conan-${VERSION}.tar.gz\` | All | Conan | [Download](https://github.com/${REPO}/releases/download/${VERSION}/crest-conan-${VERSION}.tar.gz) |
        | \`crest-vcpkg-${VERSION}.tar.gz\` | All | vcpkg | [Download](https://github.com/${REPO}/releases/download/${VERSION}/crest-vcpkg-${VERSION}.tar.gz) |
        
        **Note:** All packages include static libraries (.a/.lib), headers, and xmake.lua for easy integration.
        
        ## ðŸš€ Quick Install
        
        ### Binary Installation
        
        **Linux/macOS:**
        \`\`\`bash
        wget https://github.com/${REPO}/releases/download/${VERSION}/crest-linux-x64.tar.gz
        tar -xzf crest-linux-x64.tar.gz
        sudo cp -r lib/* /usr/local/lib/
        sudo cp -r include/* /usr/local/include/
        \`\`\`
        
        **Windows:**
        Download and extract \`crest-windows-x64.zip\`, then add to your project paths.
        
        ### xmake
        \`\`\`bash
        wget https://github.com/${REPO}/releases/download/${VERSION}/crest-xmake-${VERSION}.tar.gz
        tar -xzf crest-xmake-${VERSION}.tar.gz
        cd crest-xmake-${VERSION}
        xmake install
        \`\`\`
        
        Or add to your xmake.lua:
        \`\`\`lua
        add_requires("crest ${VERSION}")
        target("your_app")
            add_packages("crest")
        \`\`\`
        
        ### Conan
        \`\`\`bash
        wget https://github.com/${REPO}/releases/download/${VERSION}/crest-conan-${VERSION}.tar.gz
        tar -xzf crest-conan-${VERSION}.tar.gz
        conan create . --version=${VERSION}
        \`\`\`
        
        ### vcpkg
        \`\`\`bash
        wget https://github.com/${REPO}/releases/download/${VERSION}/crest-vcpkg-${VERSION}.tar.gz
        tar -xzf crest-vcpkg-${VERSION}.tar.gz
        cp -r ports/crest \$VCPKG_ROOT/ports/
        vcpkg install crest
        \`\`\`
        
        ## ðŸ“š Documentation
        
        Visit [https://muhammad-fiaz.github.io/crest](https://muhammad-fiaz.github.io/crest) for full documentation.
        
        ---
        
        **Full Changelog**: https://github.com/${REPO}/commits/${VERSION}
        EOF
        
    - name: Update Release
      uses: softprops/action-gh-release@v2
      with:
        token: ${{ secrets.GH_TOKEN }}
        body_path: release_notes.md
